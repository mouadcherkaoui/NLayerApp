@using System.Reflection
@using System.Linq
@using System.ComponentModel

@using NLayerApp.Blazor.WebAssembly.Models

@typeparam TItem

<div class="mt-4">
    <ul>
        @foreach (var item in Items)
        {
            @ItemTemplate(item)
        }
    </ul>
</div>
@code {
    [Parameter] public string Title { get; set; }
    [Parameter] public RenderFragment<TItem> ItemTemplate { get; set; }
    [Parameter] public List<TItem> Items { get; set; }
    [Parameter] public CRUDOperations Operation { get; set; }

    private Dictionary<string, object> _properties = new Dictionary<string, object>();
    
    protected override async Task OnInitializedAsync()
    {
        @foreach(var item in Items)
        {
            // we cast the item object to INotifyPropertyChanged to be able to subscribe to changes events
            // and get the new Value through reflection on the sender instance
            ((INotifyPropertyChanged)item).PropertyChanged += (sender, args) => {
                Console.WriteLine($"{args.PropertyName} raised PropertyChanged: ");                                
                Console.WriteLine(sender.GetType().GetProperty(args.PropertyName).GetValue(sender)); 
            };
            @foreach(var property in typeof(TItem).GetProperties())
            {
                Console.WriteLine(property.Name);
                _properties.Add($"{property.Name}_{item.GetHashCode()}", property.GetValue(item));
                _properties.Add($"_{property.Name}_{item.GetHashCode()}", property.GetCustomAttributesData());
                property.GetCustomAttributesData().ToList().ForEach(d =>
                {
                    Console.WriteLine($"Custom Attribute: {d.AttributeType.ToString()}");
                    d.NamedArguments.ToList().ForEach(a => Console.WriteLine($"{a.MemberInfo.Name}: {a.TypedValue.Value}"));
                });
            }
        }
    } 
}
